var g_data = {"tp":[{"fixed_attr_val":[1359,551,49.77,49.77,"testplan",1,"testplan","-",0,"0",1],"children":[{"fixed_attr_val":[524,280,75.91,75.91,"testplan",1,"Wishbone Operations Testing",100.00,1,"1",1],"usr_attr":[{"Description":"To see whether the address gets correctly mapped to correponding registers and the corresponding data values are being written and read correctly"}],"children":[{"fixed_attr_val":[262,140,75.91,75.91,"testplan",1,"Wishbone Covergroup",100.00,2,"1.1",1],"usr_attr":[{"Description":"The covergroup to test all the Wish bone interface operations"}],"children":[{"fixed_attr_val":[262,140,75.91,75.91,"covergroup",1,"/wb_pkg/wb_coverage/wishbone_cg",100.00]}]},{"fixed_attr_val":[4,3,75.00,75.00,"testplan",1,"Wishbone Address Value",100.00,2,"1.2",1],"usr_attr":[{"Description":"Address being send to the Wishbone"}],"children":[{"fixed_attr_val":[4,3,75.00,75.00,"coverpoint",1,"/wb_pkg/wb_coverage/wishbone_cg/address_val_wb",100.00]}]},{"fixed_attr_val":[256,135,52.73,52.73,"testplan",1,"Wishbone Data Value",100.00,2,"1.3",1],"usr_attr":[{"Description":"Data value to be written on the corresponding Wishbone address"}],"children":[{"fixed_attr_val":[256,135,52.73,52.73,"coverpoint",1,"/wb_pkg/wb_coverage/wishbone_cg/data_val_wb",100.00]}]},{"fixed_attr_val":[2,2,100.00,100.00,"testplan",1,"Wishbone Write Enable bit",100.00,2,"1.4",1],"usr_attr":[{"Description":"Write Enable bit of the wishbone"}],"children":[{"fixed_attr_val":[2,2,100.00,100.00,"coverpoint",1,"/wb_pkg/wb_coverage/wishbone_cg/we_bit_wb",100.00]}]}]},{"fixed_attr_val":[771,267,25.71,25.71,"testplan",1,"I2C Operations Testing",100.00,1,"2",1],"usr_attr":[{"Description":"To see the data and address which is being passed through the I2C lines and test the protocol for read and write"}],"children":[{"fixed_attr_val":[129,2,50.39,50.39,"testplan",1,"I2C Covergroup",100.00,2,"2.1",1],"usr_attr":[{"Description":"The covergroup to test various I2C addresses"}],"children":[{"fixed_attr_val":[129,2,50.39,50.39,"covergroup",1,"/i2c_pkg/i2c_coverage/i2c_mod_cg",100.00]}]},{"fixed_attr_val":[128,1,0.78,0.78,"testplan",1,"I2C Address transmitted",100.00,2,"2.2",1],"usr_attr":[{"Description":"The address value being transmitted"}],"children":[{"fixed_attr_val":[128,1,0.78,0.78,"coverpoint",1,"/i2c_pkg/i2c_coverage/i2c_mod_cg/address_val_i2c",100.00]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"I2C Operations Testing",100.00,2,"2.3",1],"usr_attr":[{"Description":"The read and write operation"}],"children":[{"fixed_attr_val":[1,0,"U",0.00,"cvg bin",1,"/#TestplanGenericCoverage#/GenericCvg/GenericCvp/\\i2c_mod_cg::op_val_i2c ","-"]}]},{"fixed_attr_val":[256,132,51.56,51.56,"testplan",1,"I2C Data Covergroup",100.00,2,"2.4",1],"usr_attr":[{"Description":"The covergroup to test various I2C data values"}],"children":[{"fixed_attr_val":[256,132,51.56,51.56,"covergroup",1,"/i2c_pkg/i2c_coverage/i2c_data_cg",100.00]}]},{"fixed_attr_val":[256,132,51.56,51.56,"testplan",1,"I2C Data transmitted",100.00,2,"2.5",1],"usr_attr":[{"Description":"The data value being transmitted"}],"children":[{"fixed_attr_val":[256,132,51.56,51.56,"coverpoint",1,"/i2c_pkg/i2c_coverage/i2c_data_cg/data_val_i2c",100.00]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"I2C Acknowledgement Check",100.00,2,"2.6",1],"usr_attr":[{"Description":"Testing the Acknowledgement bit (9th bit)"}],"children":[{"fixed_attr_val":[1,0,"U",0.00,"cvg bin",1,"/#TestplanGenericCoverage#/GenericCvg/GenericCvp/assert__i2c_ack_check","-"]}]}]},{"fixed_attr_val":[27,1,25.00,25.00,"testplan",1,"FSM working testing",100.00,1,"3",1],"usr_attr":[{"Description":"To see whether the FSM is working as in the state diagram using FSMR register"}],"children":[{"fixed_attr_val":[13,0,0.00,0.00,"testplan",1,"FSMR Covergroup",100.00,2,"3.1",1],"usr_attr":[{"Description":"To test the vaiorus functionalities of the FSM."}],"children":[{"fixed_attr_val":[13,0,0.00,0.00,"covergroup",1,"/i2cmb_env_pkg/i2cmb_coverage/fsmr_state_transition_cg",100.00]}]},{"fixed_attr_val":[6,0,0.00,0.00,"testplan",1,"FSM States",100.00,2,"3.2",1],"usr_attr":[{"Description":"The various state values in the FSM"}],"children":[{"fixed_attr_val":[6,0,0.00,0.00,"coverpoint",1,"/i2cmb_env_pkg/i2cmb_coverage/fsmr_state_transition_cg/fsm_state_values",100.00]}]},{"fixed_attr_val":[7,0,0.00,0.00,"testplan",1,"FSM State Transitions",100.00,2,"3.3",1],"usr_attr":[{"Description":"The various state transitions in the FSM"}],"children":[{"fixed_attr_val":[7,0,0.00,0.00,"coverpoint",1,"/i2cmb_env_pkg/i2cmb_coverage/fsmr_state_transition_cg/fsm_transitions",100.00]}]},{"fixed_attr_val":[1,1,100.00,100.00,"testplan",1,"FSMR permission test",100.00,2,"3.4",1],"usr_attr":[{"Description":"To test whether the FSMR register cannot be written into"}],"children":[{"fixed_attr_val":[1,1,100.00,100.00,"assert",1,"/top/wb_bus/master_write/fsmr_read_only_test",100.00]}]}]},{"fixed_attr_val":[34,0,0.00,0.00,"testplan",1,"I2CMB Controller testing",100.00,1,"4",1],"usr_attr":[{"Description":"To test the various control function of the I2CMB controller"}],"children":[{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Single bus active",100.00,2,"4.1",1],"usr_attr":[{"Description":"To test whether only one bus is being active at the same time"}],"children":[{"fixed_attr_val":[1,0,"U",0.00,"cvg bin",1,"/#TestplanGenericCoverage#/GenericCvg/GenericCvp/assert__single_bus_active","-"]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"CMDR Command responses",100.00,2,"4.2",1],"usr_attr":[{"Description":"To test whether the commands given to CMDR are working as desired"}],"children":[{"fixed_attr_val":[1,0,"U",0.00,"cvg bin",1,"/#TestplanGenericCoverage#/GenericCvg/GenericCvp/assert__CMDR_responses","-"]}]},{"fixed_attr_val":[16,0,0.00,0.00,"testplan",1,"Multiple Bus testing",100.00,2,"4.3",1],"usr_attr":[{"Description":"Ensure the correctness of 4 bit (16 values) of the BUS ID"}],"children":[{"fixed_attr_val":[16,0,0.00,0.00,"covergroup",1,"/wb_pkg/wb_coverage/multiple_bus_test_cg",100.00]}]},{"fixed_attr_val":[16,0,0.00,0.00,"testplan",1,"Bus ID",100.00,2,"4.4000000000000004",1],"usr_attr":[{"Description":"The 4 bit value of the Bus ID"}],"children":[{"fixed_attr_val":[16,0,0.00,0.00,"coverpoint",1,"/wb_pkg/wb_coverage/multiple_bus_test_cg/bus_id",100.00]}]}]},{"fixed_attr_val":[3,3,100.00,100.00,"testplan",1,"Compulsory Tests",100.00,1,"5",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[1,1,100.00,100.00,"testplan",1,"Zero Data test",100.00,2,"5.0999999999999996",1],"usr_attr":[{"Description":"Testing the working of DUT with zero data"}],"children":[{"fixed_attr_val":[1,1,100.00,"-","test","-","i2cmb_test_base","-"]}]},{"fixed_attr_val":[1,1,100.00,100.00,"testplan",1,"Random Data test",100.00,2,"5.2",1],"usr_attr":[{"Description":"Test with random I2C transaction"}],"children":[{"fixed_attr_val":[1,1,100.00,"-","test","-","i2cmb_test_base","-"]}]},{"fixed_attr_val":[1,1,100.00,100.00,"testplan",1,"Random Statistics",100.00,2,"5.3",1],"usr_attr":[{"Description":"Test with I2C random Statistics"}],"children":[{"fixed_attr_val":[1,1,100.00,"-","test","-","i2cmb_test_base","-"]}]}]},{"fixed_attr_val":[0,0,72.05,72.05,"testplan",1,"Code Coverage",100.00,1,"6",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[0,0,72.05,72.05,"testplan",1,"RTL Core",100.00,2,"6.1",1],"usr_attr":[{"Description":"Ensure that all design units have 100% statement coverage 100% branch coverage"}],"children":[{"fixed_attr_val":[0,0,72.05,72.05,"instance",1,"/top/DUT",100.00]}]}]}]}],"head":["Description"]};
processTpLinks(g_data);